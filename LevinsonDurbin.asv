function [ a ] = LevinsonDurbin( seg )

N = 256;
matInd = 1; % matlab indexing starts from 1... math starts indexing from 0. 
            % So adding always this for clear math view of vectors.

%% Estimated autocorrelation coefficients

p = zeros(10 + matInd,1);

for i = 0:10
    for t = i+1:N
        p(i+matInd) = p(i+matInd) + seg(t)*seg(t-i);
    end
end

%% First step for i = 1

a = zeros(10 + matInd,10)

s(0 + matInd) = p(1); 

k(0 + matInd) = p(1+matInd)/p(0+matInd);
a = k; 
s(1 + matInd) = (1-k^2)*s(0 + matInd);

%% Recursion steps

for i = 2:10

    for j = 1:i-1
        
        x = x + a(j,i-1)*p(i-j + matInd);
        
    end
    
    k(i + matInd) = p(i + matInd) - x / s(i - 1 + matInd);
    a(i + matInd) = k(i + matInd);
    
    for j = 1:i-1
        
        a(j)= a(j) - k(i + matInd)*a(i-j);
        
    end
    
end


end

